<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 能工巧匠集 | OneV's Den]]></title>
  <link href="http://onevcat.com/category/neng-gong-qiao-jiang-ji/atom.xml" rel="self"/>
  <link href="http://onevcat.com/"/>
  <updated>2013-04-27T23:13:06+08:00</updated>
  <id>http://onevcat.com/</id>
  <author>
    <name><![CDATA[onevcat]]></name>
    <email><![CDATA[onev@onevcat.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[两个人一起记账吧～ Our Money]]></title>
    <link href="http://onevcat.com/2013/04/our-money-app/"/>
    <updated>2013-04-06T11:54:00+08:00</updated>
    <id>http://onevcat.com/2013/04/our-money-app</id>
    <content type="html"><![CDATA[<p><a href="https://itunes.apple.com/cn/app/our-money/id562520527?ls=1&amp;mt=8"><img src="http://img.onevcat.com/2013/ourmoney-banner.jpg" alt="image" /></a></p>

<p>Our Money是一款能够协助多人在云端记账的iOS应用，可以帮助您简单地记录和整理日常开销，您可以邀请您的朋友和家人与您一起记账，免去每日汇报总结之苦。</p>

<ul>
<li><a href="https://itunes.apple.com/cn/app/our-money/id562520527?ls=1&amp;mt=8">App Store地址</a></li>
<li><a href="http://ourmoney.onevcat.com">Our Money app的首页</a></li>
</ul>


<p>大概但凡从按月领生活费开始花钱以来，都会兴起记账的念头，至于是否能够坚持，就各凭本事了。说到自己，则是多次付诸行动，然后不了了之。从一开始记在小本本上自己用计算器加加减减，到建个Excel文档自动求和，再到手机上的记账应用，时代在进步，咱的手段也在进步，却总还觉得没有找到最合适的工具。尤其是用手机记账以来，有的软件，每次对非得给一笔开销定义出两层的分类，让我头疼不已，家庭小帐非得整成个公司帐簿，改动标签也颇为麻烦；有的软件，记录条目倒是简单，但其他诸如统计等功能却也一起被简化了。不过，最让我郁闷的是，记账总成为我一个人的事情，谁让是用我的手机在记呢。</p>

<p>现在，终于等到了一款操作简单但是功能齐全，尤其是，<strong>可以多人共同记账的应用</strong>。这款叫做Our Money 的应用，最大的亮点当然就在于“Our”。它可以实现多人一起记账，只要人手一个应用，就可以和家人一起记录家庭开销，和朋友一起整理出游费用，不同的帐本可以选择和不同的人分享，每个人都能参与，条目更新实时同步，再不用一个人负责所有的帐目。</p>

<p>好啦，废话不多说，让我们一起来体验一下这个软件吧。<a href="https://itunes.apple.com/cn/app/our-money/id562520527?ls=1&amp;mt=8">下载应用</a>并打开，用邮箱注册用户，就可以开始记账啦。请记住你的邮箱是你邀请别人或者别人邀请你共同记账的标识哦～</p>

<!-- more -->




<br>


<p><img src="http://img.onevcat.com/2013/1-ourmoney-login.png" alt="OurMoney的注册登陆界面" />
Our Money的主界面相当简洁，最上方列出列表名称，收入（预算）、支出、结余也一目了然，条目的时间、分类、备注都一目了然。那么其他其他内容被藏在哪里呢？左边一拉，当前列表的按月总计；右边一拉，列表编辑，数据统计，就是这么简单～</p>

<br>


<p><img src="http://img.onevcat.com/2013/2-ourmoney-month.png" alt="按月份统计收入和开销" /></p>

<br>


<p><img src="http://img.onevcat.com/2013/3-ourmoney-stat.png" alt="按项目和用户的统计" />
首先我们新建一个列表， 在右边的界面下拉一下，就可以新建自己的列表了。选中的列表下方能够修改列表名称或者删除，中间的邀请就是重头戏啦，输入希望一同记账的朋友的邮箱，他就可以收到邀请并加入你的列表。当邀请了朋友或家人加入列表后，列表信息中就会显示多人同为列表用户。当然，在记账时随时可以邀请新的用户加入。</p>

<br>


<p><img src="http://img.onevcat.com/2013/4-ourmoney-invite.png" alt="邀请别人加入特定列表一起记账" />
选定刚才新建的列表，回到主界面，随便记下一点东西，在同一列表中的用户将通过推送（如果允许的话）收到您更改了列表的消息。而对方打开应用时，马上就可以同步地看到您所记录的信息，这便于双方更迅速地各自完成记账，免去了回家后苦苦思索或者汇总的麻烦，确实十分方便。</p>

<br>


<p><img src="http://img.onevcat.com/2013/5-ourmoney-push.png" alt="家人或朋友记账后，立即可以收到系统提醒" /></p>

<p>记错了，找不到修改的地方怎么办？点一下，记录被选中，下面就出现了编辑或者删除的选项，还可以分享条目到社交网络，秀一下收到的礼物什么的哦～</p>

<p>在消费和记账时难免会出现没有网络的尴尬时候，这时候Our Money还能正常工作么？当然，Our Money具有完善的离线模式处理，没有网络时照常使用，当之后连上网络的时候会自动为您完成所有同步，完全不用自己操心。</p>

<br>


<p><img src="http://img.onevcat.com/2013/6-ourmoney-offline.png" alt="Our Money方便的离线模式" /></p>

<p>总的来说Our Money是一款功能强大但又简单高效的记账软件，其云端记账和共同记账的理念很符合当今多人记账的需求。从今天开始就和家人朋友用Our Money一起记账吧～</p>

<p>您可以从<a href="https://itunes.apple.com/cn/app/our-money/id562520527?ls=1&amp;mt=8">App Store中下载Our Money</a>，还可以进一步通过应用内的赠送系统将您的记账和心得分享给家人朋友。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MGTwitterEngine中Twitter API 1.1的使用]]></title>
    <link href="http://onevcat.com/2013/03/mgtwitterengine%E4%B8%ADtwitter-api-1-1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <updated>2013-03-24T00:00:00+08:00</updated>
    <id>http://onevcat.com/2013/03/mgtwitterengine中twitter-api-1-1的使用</id>
    <content type="html"><![CDATA[<p>在iOS5中使用Twitter framework或者在iOS6中使用Social framework来完成Twitter的集成是非常简单和轻松的，但是如果应用要针对iOS5之前的系统版本，那么就不能使用iOS提供的框架了。一个比较常见也是使用最广泛的选择是<a href="https://github.com/mattgemmell/MGTwitterEngine">MGTwitterEngine</a>，比如<a href="http://www.onevcat.com/showcase/pomodoro_do/">PomodoroDo</a>选择使用的就是该框架。</p>

<p>但是今天在对PomodoroDo作更新的时候，发现Twitter的分享无法使用了，在查阅Twitter文档说明之后，发现这是Twitter采用了新版API的原因。默认状况下MGTwitterEngine采用的是v1版的API，并且使用XML的版本进行请求，而在1.1中，将<a href="https://dev.twitter.com/docs/api/1.1/overview#JSON_support_only">只有JSON方式的API可以使用</a>。v1.0版本的API已经于2013年3月5日被完全废弃，因此想要继续使用MGTwitterEngine来适配iOS5之前的Twitter集成需求，就需要将MGTwitterEngine的请求改为JSON方式。MGTwitterEngine也考虑到了这一点，但是因为时间比较古老了，MGTwitterEngine使用了YAJL来作为JSON的Wrapper，因此还需要将YAJL集成进来。下午的时候尝试了一会儿，成功地让MGTwitterEngine用上了1.1的Twitter API，为了以防之后别人或是自己可能遇到同样的问题，将更新的方法在此留底备忘。</p>

<ol>
<li><p>导入YAJL Framework</p>

<ul>
<li>YAJL的OC实现，从<a href="https://github.com/gabriel/yajl-objc/download">该地址下载该框架</a>。(2013年3月24日的最新版本为YAJL 0.3.1 for iOS)</li>
<li>解压下载得到的zip，将解压后的YAJLiOS.framework加入项目工程</li>
<li>在Xcode的Build Setting里在Other Linker Flags中添加-ObjC和-all_load标记</li>
</ul>
</li>
<li><p>加入MGTwitterEngine的JSON相关代码</p>

<ul>
<li>从<a href="https://github.com/mattgemmell/MGTwitterEngine">MGTwitterEngine的页面</a>down下该项目。当然如果有新版或者有别的branch可以用的话更省事儿，但是鉴于MGTwitterEngine现在的活跃度来说估计可能性不大，所以还是乖乖自己更新吧。</li>
<li>解开下载的zip，用Xcode打开MGTwitterEngine.xcodeproj工程文件，将其中Twitter YAJL Parsers组下的所有文件copy到自己的项目中。</li>
</ul>
</li>
<li><p>YAJL头文件集成</p>

<ul>
<li>接下来是C和OC接口头文件的导入，从下面下载YAJL库：<a href="https://github.com/thinglabs/yajl-objc">https://github.com/thinglabs/yajl-objc</a></li>
<li>在下载得到的文件夹中，寻找并将以下h文件拷贝到自己的工程中：

<ul>
<li>yajl_common.h</li>
<li>yajl_gen.h</li>
<li>yajl_parse.h</li>
<li>NSObject+YAJL.h</li>
<li>YAJL.h</li>
<li>YAJLDocument.h</li>
<li>YAJLGen.h</li>
<li>YAJLParser.h</li>
</ul>
</li>
</ul>
</li>
<li><p>最后是在MGTwitterEngine设定为使用v1.1 API以及JSON方式请求</p></li>
</ol>


<p>在MGTwitterEngine.m中，将对应代码修改为以下：</p>

<p>```objc</p>

<h1>define USE_LIBXML 0</h1>

<h1>define TWITTER_DOMAIN @"api.twitter.com/1.1"</h1>

<p>```</p>

<p>在MGbTwitader.h，启用YAJL</p>

<p>```objc</p>

<h1>define define YAJL_AVAILABLE 1</h1>

<p>```</p>

<p>本文参考：</p>

<p><a href="https://github.com/mattgemmell/MGTwitterEngine/issues/107">MGTwitterEngine issues 107</a></p>

<p><a href="http://damienh.org/2009/06/20/setting-up-mgtwitterengine-with-yajl-106-for-iphone-development/">http://damienh.org/2009/06/20/setting-up-mgtwitterengine-with-yajl-106-for-iphone-development/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 4 插件制作入门]]></title>
    <link href="http://onevcat.com/2013/02/xcode-plugin/"/>
    <updated>2013-02-02T00:00:00+08:00</updated>
    <id>http://onevcat.com/2013/02/xcode-plugin</id>
    <content type="html"><![CDATA[<p><img src="http://www.onevcat.com/wp-content/uploads/2013/02/QQ20130202-15.png"></p>

<p>本文欢迎转载，但烦请保留此行出处信息：<a href="http://www.onevcat.com/2013/02/xcode-plugin/">http://www.onevcat.com/2013/02/xcode-plugin/</a></p>

<p>本文将介绍创建一个Xcode4插件所需要的基本步骤以及一些常用的方法。请注意为Xcode创建插件并没有任何的官方支持，因此本文所描述的方法和提供的信息可能会随Apple在Xcode上做的变化而失效。另外，由于创建插件会使用到私有API，因此Xcode插件也不可能被提交到Mac App Store上进行出售。</p>

<p>本文内容是基于Xcode 4.6（4H127）完成的，但是应该可以适用于任意的Xcode 4.X版本。VVPlugInDemo的工程文件我放到了github上，有需要的话您可以从<a href="https://github.com/onevcat/VVPluginDemo">这里下载</a>并作为参考和起始来使用。</p>

<h2>综述</h2>

<p>Xcode本身作为一个IDE来说已经可以算上优秀，但是依然会有很多缺失的功能，另外在开发中针对自己的开发需求，创建一些便利的IDE插件，必定将大为加快开发速度。由于苹果官方并不对Xcode插件提供任何技术和文档支持，因此对于大部分开发者来说可能难于上手。虽然没有官方支持，但是在Xcode中开发并使用插件是可能的，并且也是被默许的。在Xcode启动的时候，Xcode将会寻找位于~/Library/Application Support/Developer/Shared/Xcode/Plug-ins文件夹中的后缀名为.xcplugin的bundle作为插件进行加载（运行其中的可执行文件），这就可以令我们光明正大合法合理地将我们的代码注入（虽然这个词有点不好听）Xcode，并得到运行。因此，想要创建Xcode插件，<strong>我们需要创建Bundle工程并将编译的bundle放到上面所说的插件目录中去</strong>，这就是Xcode插件的原理。</p>

<p>需要特别说明的是，因为Xcode会在启动时加载你的插件，这样就相当于你的代码有机会注入Xcode。只要你的插件加载成功，那么它将和Xcode共用一个进程，也就是说当你的代码crash的时候，Xcode也会随之crash。同样的情况也可能在Xcode版本更新的时候，由于兼容性问题而出现（因为插件可能使用私有API，Apple没有义务去维护这些API的可用性）。在出现这种情况的时候，可以直接删除插件目录下的导致问题的xcplugin文件即可。</p>

<!--more-->


<h2>你的第一个插件</h2>

<p>我将通过制作一个简单的demo插件来说明一般Xcode插件的编写方法，这个插件将在Xcode的Edit菜单中加入一个叫做“What is selected”的项目，当你点击这个菜单命令的时候，将弹出一个警告框，提示你现在在编辑器中所选中的内容。我相信这个例子能包含绝大部分在插件创建中所必须的步骤和一些有用的方法。由于我自己也只是个半吊子开发者，水平十分有限，因此错误和不当之处还恳请大家轻喷多原谅，并帮助我改正。那么开始..</p>

<h3>创建Bundle工程</h3>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-1.png" alt="image" /> 创建工程，OSX，Framework &amp; Library，选择Bundle，点击Next。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-2.png" alt="image" /></p>

<p>在Project信息页面中，填入插件名字，在这个例子里，就叫做DemoPlugin，Framework使用默认的Cocoa就行。另外一定记住将Use Automatic Reference Counting前的勾去掉，由于插件只能使用GC来进行内存管理，因此不需要使用ARC。</p>

<h3>工程设置</h3>

<p>插件工程有别于一般工程，需要进行一些特别的设置，以确保能正确编译插件bundle。</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-3.png" alt="image" /></p>

<p>首先，在编辑工程的Info.plist文件（直接编辑plist文件或者是修改TARGETS下对应target的Info都行），加入以下三个布尔值：</p>

<p><code>
XCGCReady = YES
XCPluginHasUI = NO
XC4Compatible = YES
</code></p>

<p>这将告诉编译器工程已经使用了GC，没有另外的UI并且是Xcode4适配的，否则你的插件将不会被加载。接下来，对Bundle Setting进行一些设置：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-4.png" alt="image" /></p>

<ul>
<li><p>Installation Build Products Location 设置为 ${HOME}</p>

<ul>
<li>Product的根目录</li>
</ul>
</li>
<li><p>Installation Directory 设置为</p>

<ul>
<li>/Library/Application Support/Developer/Shared/Xcode/Plug-ins</li>
<li>这里指定了插件安装的位置，这样build之后就会将插件直接扔到Plug-ins的目录了。当然不嫌麻烦的话也可以每次自己复制粘贴过去。注意这里不是绝对路径，而是基于上面的${HOME}的路径。</li>
</ul>
</li>
<li><p>Deployment Location 设置为 YES</p>

<ul>
<li>告诉Xcode不要用设置里的build location，而是用Installation Directory来确定build后放哪儿</li>
</ul>
</li>
<li><p>Wrapper extension 设置为 xcplugin</p>

<ul>
<li>把产品后缀名改为xcplugin，否则Xcode不会加载插件</li>
</ul>
</li>
</ul>


<p>如一开始说的那样，Xcode会在每次启动的时候搜索插件目录并进行加载，做如上设置的目的是每次build之后你只需要重新启动Xcode就能看到重新编译后的插件的效果，而避免了自己再去寻找Product然后copy&amp;paste的步骤。<br/>
另外，还需要自己在User-Defined里添加一个键值对：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-5.png" alt="image" /></p>

<ul>
<li>GCC_ENABLE_OBJC_GC 设置为 supported</li>
</ul>


<p>至此所有配置工作完成，接下来终于可以开始实现插件了～</p>

<h3>Hello World</h3>

<p>新建一个类，取名叫做VVPluginDemo（当然只要不重，随便什么名字都是可以的），继承自NSObject（做iOS开发的童鞋请不要忘记现在是写Xcode插件，您需要通过OS X的Cocoa里的Objective-C class模版，而不要用Cocoa Touch的模版..）。打开VVPluginDemo.m，加入以下代码：</p>

<p>```objc
+(void)pluginDidLoad:(NSBundle *)plugin {</p>

<pre><code>NSLog(@"Hello World"); 
</code></pre>

<p>}
```</p>

<p>Build（对于OS X 10.8的SDK可能会有提示GC已经废弃的警告，不用管，Xcode本身是GC的，ARC的插件是无法load的），打开控制台（Control+空格 输入console），重新启动Xcode。应该能控制台中看到我们的插件的输出：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-6.png" alt="image" /></p>

<p>太好了。有句话叫做，写出一个Hello World，就说明你已经掌握了一半…那么，剩下的一半内容，将对开发插件时可能面临的问题和一些常用的手段进行介绍。</p>

<h3>创建插件单例，监听事件</h3>

<p>继续我们的插件，还记得我们的目的么？在Xcode的Edit菜单中加入一个叫做“What is selected”的项目，当你点击这个菜单命令的时候，将弹出一个警告框，提示你现在在编辑器中所选中的内容。一般来说，我们希望插件能够在整个Xcode的生命周期中都存在（不要忘记其实用来写Cocoa的Xcode本身也是一个Cocoa程序）。最好的办法就是在+pluginDidLoad:中初始化单例，如下：</p>

<p>```objc
+ (void) pluginDidLoad: (NSBundle*) plugin {</p>

<pre><code>[self shared]; 
</code></pre>

<p>}</p>

<p>+(id) shared {</p>

<pre><code>static dispatch_once_t once;   
static id instance = nil;   
dispatch_once(&amp;once, ^{   
    instance = [[self alloc] init];   
});   
return instance;   
</code></pre>

<p>}
```</p>

<p>这样，以后我们在别的类中，就可以简单地通过[VVPluginDemo shared]来访问到插件的实例了。</p>

<p>在init中，加入一个程序启动完成的事件监听，并在程序完成启动后，在菜单栏的Edit中添加我们所需要的菜单项，这个操作最好是在Xcode完全启动以后再进行，以避免一些潜在的危险和冲突。另外，由于想要在按下按钮时显示编辑器中显示的内容，我们可能需要监听NSTextViewDidChangeSelectionNotification事件（WTF，你为什么会知道要监听什么。别着急，后面会再说，先做demo先做demo）</p>

<p>```objc
- (id)init {</p>

<pre><code>if (self = [super init]) { 
    [[NSNotificationCenter defaultCenter] addObserver:self 
            selector:@selector(applicationDidFinishLaunching:) 
                name:NSApplicationDidFinishLaunchingNotification 
              object:nil]; 
} 
return self; 
</code></pre>

<p>}</p>

<ul>
<li>(void) applicationDidFinishLaunching: (NSNotification*) noti { <br/>
  [[NSNotificationCenter defaultCenter] addObserver:self

<pre><code>      selector:@selector(selectionDidChange:)   
          name:NSTextViewDidChangeSelectionNotification
        object:nil];   
</code></pre>

  NSMenuItem *editMenuItem = [[NSApp mainMenu] itemWithTitle:@"Edit"]; <br/>
  if (editMenuItem) {

<pre><code>  [[editMenuItem submenu] addItem:[NSMenuItem separatorItem]];   
  NSMenuItem *newMenuItem = [[NSMenuItem alloc] initWithTitle:@"What is selected" action:@selector(showSelected:) keyEquivalent:@""];
  [newMenuItem setTarget:self];   
  [newMenuItem setKeyEquivalentModifierMask: NSAlternateKeyMask];   
  [[editMenuItem submenu] addItem:newMenuItem];   
  [newMenuItem release];   
</code></pre>

<p>  } <br/>
}</p></li>
</ul>


<p>-(void) selectionDidChange:(NSNotification *)noti {</p>

<pre><code>//Nothing now. Just in case of crash.   
</code></pre>

<p>}</p>

<p>-(void) showSelected:(NSNotification *)noti {</p>

<pre><code>//Nothing now. Just in case of crash.   
</code></pre>

<p>}
```</p>

<p>现在build，重启Xcode，如果一切顺利的话，你应该能看到菜单栏上的变化了：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-8.png" alt="image" /></p>

<h3>完成Demo插件</h3>

<p>剩下的事情就很简单了，在接收到TextView的ChangeSelection通知后把现在选中的文本更新一下，在点击按钮时显示一个含有储存文字的对话框就行了。Let's do it~</p>

<p>首先在.m文件中加上property声明（个人习惯，喜欢用ivar也可以）。在#import和@implementation之间加上：</p>

<p><code>objc
@interface VVPluginDemo()
@property (nonatomic,copy) NSString *selectedText;
@end
</code></p>

<p>得益于新的属性自动绑定，synthesis已经不需要写了（对此还不太了解的童鞋可以参看我的<a href="http://www.onevcat.com/2012/06/modern-objective-c/">这篇博文</a>）。然后完成- selectionDidChange:和-showSelected:如下：</p>

<p>```objc
-(void) selectionDidChange:(NSNotification *)noti {</p>

<pre><code>if ([[noti object] isKindOfClass:[NSTextView class]]) {
    NSTextView* textView = (NSTextView *)[noti object];

    NSArray* selectedRanges = [textView selectedRanges];  
    if (selectedRanges.count==0) {  
        return;  
    }

    NSRange selectedRange = [[selectedRanges objectAtIndex:0] rangeValue];  
    NSString* text = textView.textStorage.string;  
    self.selectedText = [text substringWithRange:selectedRange];  
}  
//Hello, welcom to OneV's Den  
</code></pre>

<p>}</p>

<p>-(void) showSelected:(NSNotification *)noti {</p>

<pre><code>NSAlert *alert = [[[NSAlert alloc] init] autorelease];  
[alert setMessageText: self.selectedText];  
[alert runModal];  
</code></pre>

<p>}
```</p>

<p>Build，重启Xcode，随便选中一段文本，然后点击Edit中的What is selected。OY～完成～</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-7.png" alt="image" /></p>

<p>至此，您应该已经掌握了基本的Xcode插件制作方法了。接下来的就是根据您的需求实践了～但是在此之前，还有一些重要的技巧和常用方法可能您会有兴趣。</p>

<h2>开发插件时有用的技巧</h2>

<p>由于没有文档指导插件开发，调试也只能用打log的方式，因此会十分艰难。掌握一些常用的技巧和方法，将会很有帮助。</p>

<h3>I Need All Notifications!</h3>

<p>一种很好的方法是监听需要的消息，并针对消息作出反应。就像demo里的NSTextViewDidChangeSelectionNotification。对于熟悉iOS或者Mac开发的童鞋来说，应该在日常开发里也接触过很多类型的Notification了，而因为插件开发没有文档，因此我们需要自己去寻找想要监听和接收的Notification。<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSNotificationCenter_Class/Reference/Reference.html">NSNotificationCenter文档</a>中，关于加入Observer的方法-addObserver:selector:name:object:，当给name参数赋值nil时，将可以监听到所有的notification：</p>

<blockquote><p>notificationName: The name of the notification for which to register the observer; that is, only notifications with this name are delivered to the observer. If you pass nil, the notification center doesn’t use a notification’s name to decide whether to deliver it to the observer.</p></blockquote>

<p>因此可以用它来监测所有的Notification，并从中找到自己所需要的来进行处理：</p>

<p>```objc
-(id)init {</p>

<pre><code>if (self = [super init]) { 
    [[NSNotificationCenter defaultCenter] addObserver:self 
        selector:@selector(notificationListener:) 
            name:nil object:nil]; 
} 
return self; 
</code></pre>

<p>}</p>

<p>-(void)notificationListener:(NSNotification *)noti {</p>

<pre><code>NSLog(@" Notification: %@", [noti name]);   
</code></pre>

<p>}
```</p>

<p>编译重启后在控制台得到的输出：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-9.png" alt="image" /></p>

<p>当然如果只是打印名字的话可能帮助不大，也许你需要从noti的object或者userinfo中获得更多的信息。按条件打印，配合控制台的搜索进行寻找会是一个不错的方法。</p>

<h3>Hack私有API</h3>

<p>用OC的动态特性可以做很多事，比如在运行时替换掉某个Xcode的方法。记住Xcode本身也是Cocoa程序，本质上和我们用Xcode所开发的程序没有太大区别。因此如果可以知道Xcode在进行某些操作时候的方法的话，就可以将该方法与我们自己实现的方法进行运行时调换，从而改为执行我们自己的方法。这便是运行时的Method Swizzling（或者叫Monkey patch，管他呢），这在smalltalk类语言中是一种很有趣和方便的做法，关于这方面更详细的，我以前写过一篇关于<a href="http://www.onevcat.com/2012/04/objective-c-runtime/">OC运行时特性的文章</a>。当时提到的method swizzling方法并没有对交换的函数进行检查等工作，通用性也比较差。现在针对OC已经有比较成熟的一套方法交换机制了，其中比较有名的有<a href="https://github.com/rentzsch/jrswizzle">rentzsch的jrswizzle</a>以及<a href="http://cocoadev.com/wiki/MethodSwizzling">OC社区的MethodSwizzling实现</a>。</p>

<p>有了方法交换的办法，接下来需要寻找要交换的方法。Xcode所使用的所有库都包含在Xcode.app/Contents/的Frameworks，SharedFrameworks和OtherFrameworks三个文件夹下。其中和Xcode关系最为直接以及最为重要的是Frameworks中的IDEKit和IDEFoundation，以及SharedFrameworks中的DVTKit和DVTFoundation四个。其中DVT前缀表示Developer Toolkit，IDE和IDEFoundation中的类基本是DVT中类的子类。这四个framework将是我们在开发改变Xcode默认行为的Xcode插件时最主要要打交道的。另外如果想对IB进行注入，可能还需要用到Frameworks下的IBAutolayoutFoundation（待确定）。关于这些framework中的私有API，可以使用<a href="http://stevenygard.com/projects/class-dump/">class-dump</a>很简单地将头文件提取出来。当然，也有人为懒人们完成了这个工作，<a href="https://github.com/probablycorey/xcode-class-dump">probablycorey的xcode-class-dump</a>中有绝大部分类的头文件。</p>

<p>作为Demo，我们将简单地完成一个方法交换：在补全代码时，我们简单地输出一句log。</p>

<h4>MethodSwizzle</h4>

<p>为了交换方法，可以直接用现成的MethodSwizzle实现。MethodSwizzle可以在<a href="https://gist.github.com/4696790">这里</a>找到。将.h和.m导入插件工程即可～</p>

<h4>寻找对应API</h4>

<p>通过搜索，补全代码的功能定义在DVKit中的DVTTextCompletionController类，其中有一个方法为- (BOOL)acceptCurrentCompletion，猜测返回的布尔值是否接受当前的补全结果。由于这些都是私有API，因此需要在我们的工程中自己进行声明。在新建文件中的C and C++中选Header File，为工程加入一个Header文件，并加入一下代码：</p>

<p><code>objc
@interface DVTTextCompletionController : NSObject
- (BOOL)acceptCurrentCompletion;
@end
</code></p>

<p>然后需要将DVKit.framework添加到工程中，在/Applications/Xcode.app/Contents/SharedFrameworks中找到DVTKit.framework，拷贝到任意正常能访问到的目录下，然后在插件工程的Build Phases中加入framework。嗯？你说找不到DVTKit.framework？亲，私有框架当然找不到，点击Add Other...然后去刚才copy出来的地方去找吧..</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-10.png" alt="image" /></p>

<p>最后便是加入方法交换了～新建一个DVTTextCompletionController的Category，命名为PluginDemo</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-13.png" alt="image" /></p>

<p>import之前定义的header和MethodSwizzle.h，在DVTTextCompletionController+PluginDemo.m中加入下面实现：</p>

<p>```objc
+ (void)load
{</p>

<pre><code>MethodSwizzle(self,
              @selector(acceptCurrentCompletion),
              @selector(swizzledAcceptCurrentCompletion));
</code></pre>

<p>}</p>

<ul>
<li>(BOOL)swizzledAcceptCurrentCompletion {<br/>
NSLog(@"acceptCurrentCompletion is called by %@", self);<br/>
return [self swizzledAcceptCurrentCompletion];<br/>
}</li>
</ul>


<p>```</p>

<p>+load方法在每个NSObject类或子类被调用时都会被执行，可以用来在runtime配置当前类。这里交换了DVTTextCompletionController的acceptCurrentCompletion方法和我们自己实现的swizzledAcceptCurrentCompletion方法。在swizzledAcceptCurrentCompletion中，先打印了一句log，输出相应该方法的实例。接下来似乎是调用了自己，但是实际上swizzledAcceptCurrentCompletion的方法已经和原来的acceptCurrentCompletion交换，因此这里实际调用的将是原来的方法。那么这段代码所做的就是将Xcode想调用原来的acceptCurrentCompletion的行为，改变成了先打印一个log，之后再进行原来的acceptCurrentCompletion调用。</p>

<p>编译，重启Xcode，打开一个工程随便输入点东西，让补全出现。控制台中的输出符合我们的预期：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-12.png" alt="image" /></p>

<p>太棒了，有了对私有API的注入，能做的事情大为扩展了。</p>

<h3>研究Xcode的View Hierarchy</h3>

<p>另外一种常见的插件行为是修改某些界面。再一次说明，Xcode是一个标准Cocoa程序，一切都是那么熟悉（如果你为Cocoa或者CocoaTouch开发的话，应该是很熟悉）。拿到整个App的Window，然后依次递归打印subview。stackoverflow上有<a href="http://stackoverflow.com/questions/2715534/where-does-a-uialertview-live-while-not-dismissed/2715772#2715772">一个UIView的版本</a>，稍微改变一下就可以得到一个NSView版本。新建一个NSView的Dumping Category，加入如下实现：</p>

<p>```objc
-(void)dumpWithIndent:(NSString *)indent {</p>

<pre><code>NSString *class = NSStringFromClass([self class]);
NSString *info = @"";
if ([self respondsToSelector:@selector(title)]) {
    NSString *title = [self performSelector:@selector(title)];
    if (title != nil &amp;&amp; [title length] &gt; 0) {
        info = [info stringByAppendingFormat:@" title=%@", title];
    }
}
if ([self respondsToSelector:@selector(stringValue)]) {
    NSString *string = [self performSelector:@selector(stringValue)];
    if (string != nil &amp;&amp; [string length] &gt; 0) {
        info = [info stringByAppendingFormat:@" stringValue=%@", string];
    }
}
NSString *tooltip = [self toolTip];
if (tooltip != nil &amp;&amp; [tooltip length] &gt; 0) {
    info = [info stringByAppendingFormat:@" tooltip=%@", tooltip];
}

NSLog(@"%@%@%@", indent, class, info);

if ([[self subviews] count] &gt; 0) {  
    NSString *subIndent = [NSString stringWithFormat:@"%@%@", indent, ([indent length]/2)%2==0 ? @"| " : @": "];  
    for (NSView *subview in [self subviews]) {  
        [subview dumpWithIndent:subIndent];  
    }  
}  
</code></pre>

<p>}
```</p>

<p>在合适的时候（比如点击某个按钮时），调用下面一句代码，便可以打印当前Xcode的结构，非常方便。这对了解Xcode的构成和如何搭建一个如Xcode般复杂的程序很有帮助～</p>

<pre><code>[[[NSApp mainWindow] contentView] dumpWithIndent:@""];
</code></pre>

<p>在结果控制台中的输出结果类似这样：</p>

<p><img src="http://i758.photobucket.com/albums/xx224/onevcat/QQ20130202-14.png" alt="image" /></p>

<p>根据自己需要去去相应的view吧～然后配合方法交换，基本可以做到尽情做想做的事情了。</p>

<h2>最后的小bonus</h2>

<p>/Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Versions/A/Resources中有不少Xcode界面用的图片，pdf，png和tiff格式都有，想要自定义run，stop按钮或者想要让断点标记从蓝色块变成机器猫头像什么的…应该是可能的～</p>

<p>/Applications/Xcode.app/Contents/PlugIns目录里有很多Xcode自带的“官方版”外挂插件，显然通过class-dump和注入的方法，你可以为Xcode的插件写插件...嗯～比如改变debugger的行为或者让plist编辑器更聪明，就是这样的。</p>

<p>希望Apple能提供为Xcode编写插件的支持，所有东西都需要摸索虽然很有趣，但是也比较花时间。</p>

<p>另外，github等代码托管网站上有不少大神们写的插件，都开源放出。这些必须是学习插件编写的最优秀的教材和参考：</p>

<ul>
<li><a href="https://github.com/omz/ColorSense-for-Xcode">omz / ColorSense-for-Xcode</a> Plugin for Xcode to make working with colors more visual</li>
<li><a href="https://github.com/omz/Dash-Plugin-for-Xcode">omz / Dash-Plugin-for-Xcode</a> Plugin for Xcode to integrate the Dash documentation viewer app</li>
<li><a href="https://github.com/omz/MiniXcode">omz / MiniXcode</a> Xcode plugin for working without the main toolbar</li>
<li><a href="https://github.com/ksuther/KSImageNamed-Xcode">ksuther / KSImageNamed-Xcode</a> Xcode plug-in that provides autocomplete for imageNamed: calls</li>
<li><a href="https://github.com/JugglerShu/XVim">JugglerShu / XVim</a> Xcode plugin for Vim keybindings</li>
<li><a href="https://github.com/davekeck/Xcode-4-Fixins">davekeck / Xcode-4-Fixins</a> Plugins for fixing Xcode 4 bugs and shortcomings</li>
<li><a href="https://github.com/0xced/CLITool-InfoPlist">0xced / CLITool-InfoPlist</a> Xcode plugin to process Info.plist file for CLI Tool targets</li>
<li><a href="https://github.com/questbeat/Lin">questbeat / Lin</a> Xcode4 plugin shows completion for NSLocalizedString</li>
</ul>


<p>好了，就到这里吧。VVPlugInDemo的工程文件我放到了github上，有需要的话您可以从<a href="https://github.com/onevcat/VVPluginDemo">这里下载</a>并作为参考和起始来使用。谢谢您看完这么长的文。正如一开始所说的，我自己水平十分有限，因此错误和不当之处还恳请大家轻喷多原谅，并帮助我改正，再次谢谢～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity3D中暂停时的动画及粒子效果实现]]></title>
    <link href="http://onevcat.com/2013/01/do_not_pause_me/"/>
    <updated>2013-01-26T00:00:00+08:00</updated>
    <id>http://onevcat.com/2013/01/do_not_pause_me</id>
    <content type="html"><![CDATA[<p><!--:zh--><h2 style="text-align: justify;"><a href="http://www.onevcat.com/wp-content/uploads/2013/01/big副本.png"><img class="aligncenter size-full wp-image-1087" title="unpause" src="http://www.onevcat.com/wp-content/uploads/2013/01/big副本.png" alt="" width="500" height="200" data-pinit="registered" /></a></h2>
<p style="text-align: justify;">暂停是游戏中经常出现的功能，而Unity3D中对于暂停的处理并不是很理想。一般的做法是将Time.timeScale设置为0。Unity的文档中对于这种情况有以下描述；</p></p>




<p><blockquote>The scale at which the time is passing. This can be used for slow motion effects….When timeScale is set to zero the game is basically paused …</blockquote>
<p style="text-align: justify;">timeScale表示游戏中时间流逝快慢的尺度。文档中明确表示，这个参数是用来做慢动作效果的。对于将timeScale设置为0的情况，仅只有一个补充说明。在实际使用中，通过设置timeScale来实现慢动作特效，是一种相当简洁且不带任何毒副作用的方法，但是当将timeScale设置为0来实现暂停时，<strong>由于时间不再流逝，所有和时间有关的功能痘将停止</strong>，有些时候这正是我们想要的，因为毕竟是暂停。但是副作用也随之而来，在暂停时各种动画和粒子效果都将无法播放（因为是时间相关的），FixedUpdate也将不再被调用。</p>
<p style="text-align: justify;"><strong>换句话说，最大的影响是，在timeScale＝0的暂停情况下，你将无法实现暂停菜单的动画以及各种漂亮的点击效果。</strong></p>
<p style="text-align: justify;">但是并非真的没办法，关于timeScale的文档下就有提示：</p></p>




<p><blockquote>Except for realtimeSinceStartup, timeScale affects all the time and delta time measuring variables of the Time class.</blockquote>
<p style="text-align: justify;">因为realtimeSinceStartup和timeScale无关，因此也就成了解决在暂停下的动画和粒子效果的救命稻草。对于Unity动画，在每一帧，根据实际时间寻找相应帧并采样显示的方法来模拟动画：</p></p>




<p><pre class="lang:c# mark:19-21 decode:true" title="暂停时采样的核心代码">AnimationState _currState = animation[clipName];
bool isPlaying = true;</pre></p>




<p>float _progressTime = 0F;<br />
float _timeAtLastFrame = 0F;<br />
float _timeAtCurrentFrame = 0F;<br />
bool _inReversePlaying = false;</p>




<p>float _deltaTime = 0F;<br />
animation.Play(clipName);<br />
_timeAtLastFrame = Time.realtimeSinceStartup;</p>




<p>while (isPlaying) {<br />
    _timeAtCurrentFrame = Time.realtimeSinceStartup;<br />
    _deltaTime = _timeAtCurrentFrame - _timeAtLastFrame;<br />
    _timeAtLastFrame = _timeAtCurrentFrame; </p>




<p>    _progressTime += _deltaTime;</p>




<p>    _currState.normalizedTime = _inReversePlaying ? 1.0f - (_progressTime / _currState.length) : _progressTime / _currState.length; <br />
    animation.Sample();</p>




<p>    //...repeat or over by wrap mode <br />
}
<p style="text-align: justify;">对于粒子效果，同样进行计时，并通过粒子系统的Simulate方法来模拟对应时间的粒子状态来完成效果，比如对于Legacy粒子，使Emitter在timeScale＝0暂停时继续有效发射并显示效果：</p></p>




<p><pre class="lang:c# mark:4-5 decode:true">_deltaTime = Time.realtimeSinceStartup - _timeAtLastFrame;
_timeAtLastFrame = Time.realtimeSinceStartup;
if (Time.timeScale == 0 ){
    _emitter.Simulate(_deltaTime);
    _emitter.emit = true;
}</pre>
<p style="text-align: justify;">核心的代码基本都在上面了，可以根据这个思路完成实现。<a href="https://github.com/onevcat/UnpauseMe">完整的代码和示例工程</a>我放到了github上，有需要的朋友可以去查看，也欢迎大家指正。</p><!--:--><!--:en-->&nbsp;</p>




<p><!--:--><!--:ja-->&nbsp;</p>




<p><!--:--></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity编译至Xcode工程后自动添加文件和库的方法]]></title>
    <link href="http://onevcat.com/2012/12/xuporter/"/>
    <updated>2012-12-18T00:00:00+08:00</updated>
    <id>http://onevcat.com/2012/12/xuporter</id>
    <content type="html"><![CDATA[<p><!--:zh--><p style="text-align: justify;"><a href="http://www.onevcat.com/wp-content/uploads/2012/12/1.png"><img class="aligncenter size-full wp-image-1072" title="XUPorter" src="http://www.onevcat.com/wp-content/uploads/2012/12/1.png" alt="" width="763" height="256" data-pinit="registered" /></a></p>
<p style="text-align: justify;">废话之前</p>
<p style="text-align: justify;"><a href="https://github.com/onevcat/XUPorter">XUPorter项目Github链接</a>
<a href="http://www.onevcat.com/wp-content/uploads/2012/12/XUPorter.unitypackage.zip">Unity打包文件下载</a></p></p>




<p><h3 style="text-align: justify;">为什么想要自动添加</h3>
<p style="text-align: justify;">由于Unity是全平台的游戏开发环境，在开发中针对特定平台的特定功能时，很难避免根据对象平台的不同而引入不同的依赖。包括源码，需要的库和框架等。在使用各种插件后这种情况愈发严重：比如想加入内购功能，StroreKit.framework必不可少，而且也需要相应的处理代码。按照一般的Unity插件开发流程，在完成.cs的接口声明和Unity侧的调用实现后，最重要的当然是在iOS native侧完成实现。而在以前，包括依赖库和所有源码文件，都只有在Unity生成Xcode工程之后，再手动添加。如果工程小依赖少的话花不了太多时间，但是如果项目很大，很可能折腾一次就要十来分钟，严重影响了工作效率，必须加以解决。</p></p>




<p><h3 style="text-align: justify;">怎么办</h3>
<p style="text-align: justify;">Unity开发团队也意识到了这个问题，在Unity编译的最后加入了一个脚本调用的命令，会自动搜索Editor文件夹下的PostprocessBuildPlayer，并进行调用，在该文件中可以自己加入脚本来向Xcode中添加库和文件。关于PostprocessBuildPlayer的详细信息，可以参看<a href="http://docs.unity3d.com/Documentation/Manual/BuildPlayerPipeline.html">官方文档</a>，关于向Xcode中添加文件或库，gonzoua的<a href="https://github.com/gonzoua/xcs">xcs</a>也许是不错的选择。但是似乎xcs只能针对Xcode3来添加，在Xcode4中，主工程文件的结构发生了改变，导致xcs失效，而这个项目也迟迟没有更新（也许有时间我会考虑接手继续这个项目，但肯定不是现在...）。因此不得不打其他主意。</p>
<p style="text-align: justify;"><!--:--><!--more--><!--:zh--></p>
<p style="text-align: justify;">在Unity3.5中，加入了一个很棒的标签——<a href="http://docs.unity3d.com/Documentation/ScriptReference/PostProcessBuildAttribute.html">[PostProcessBuild]</a>，被该标签标注的函数将自动在build player后被调用，这为大家提供了一个不需要用脚本和命令行就能添加或修改编译得到的工程的绝好的入口。darktable用python实现了一个Xcode4工程文件读写的接口<a href="https://bitbucket.org/darktable/mod-pbxproj/overview">Mod PBXProj</a>，但是对于Unity来说，更需要的是C#的实现。Cariola完成了<a href="https://github.com/dcariola/XCodeEditor-for-Unity">一部分实现</a>，但是存在一些错误和不太好用的地方，代码也很乱。我在其基础上进行了一些改进和整理。但是因为变动的还是比较大，很难merge回去，所以决定自己开一个项目来继续推进这个项目。</p></p>




<p><h3 style="text-align: justify;">XUPorter</h3>
<p style="text-align: justify;">我把它叫做XUPorter，a dependency porter from Unity to Xcode。XUPorter可以读取Xcode工程文件并进行解析（再次感谢darktable的工作），之后在Unity工程的Assets目录下寻找所有的.projmods文件，并根据文件内容向工程中添加文件或库。</p></p>




<p><h4 style="text-align: justify;">使用方法</h4>
<p style="text-align: justify;">将Github项目中的所有文件copy到Unity工程文件夹下的/Assets/Editor目录中，XUPorter使用一个<a href="https://github.com/prime31/UIToolkit/blob/master/Assets/Plugins/MiniJSON.cs">改良版的MiniJSON</a>来进行。如果你的项目中已经在使用这个MiniJSON了的话，可以直接将XUPorter文件夹下的MiniJSON文件夹删掉；如果不一样的话，你可以选择其中一个重构一下或者加上命名空间来解决类名冲突。接下来，Mods文件夹下是示例文件以及需要导入Xcode的文件。在看完以后你需要把Mods文件夹下的所有.projmods文件以及Mods/iOS文件夹下的内容删除或者替换为你所需要的内容。</p>
<p style="text-align: justify;">在<a href="http://d.pr/f/HAzc">这里</a>提供了.unitypackege格式文件的下载，你也可以选择下载打包好的文件并导入你的工程，之后的步骤和上面一样。</p>
<p style="text-align: justify;">.projmods文件是一个JSON格式的配置patch文件，定义了要如何设置Xcode工程。举个基本的例子，比如KKKeychain.projmods：</p>
<p style="text-align: justify;">各参数定义如下： * group：所有由该projmods添加的文件和文件夹所属的Xcode中的group名称 * libs：在Xcode Build Phases中需要添加的动态链接库的名称，比如libz.dylib * frameworks：在Xcode Build Phases中需要添加的框架的名称，比如Security.framework * headerpaths：Xcode中编译设置中的Header Search Paths路径 * files：加入工程的文件名 * folders：加入工程的文件夹，其中所有的文件和文件夹都将被加入工程中 * excludes：忽略的文件的正则表达式，匹配的文件将不会被加入工程中 更多的例子可以参看Mods文件夹中的其他projmods文件。所有的定义路径都是基于当前projmods文件位置的相对路径。 最后，在完成projmods后，Unity会在编译完成后，调用XCodePostProcess的OnPostProcessBuild来对编译得到的Xcode工程进行修改：</p></p>



]]></content>
  </entry>
  
</feed>
